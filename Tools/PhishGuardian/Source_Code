#Frontend
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>PhishGuardian - AI Phishing Detection</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">

    <style>
        body {
            background-color: #1e1e2f;
            color: #f0f0f0;
            font-family: 'Inter', sans-serif;
        }

        .gradient-header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
        }

        .card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
            border-radius: 1rem;
            color: #f0f0f0;
        }

        .icon {
            font-size: 1.2rem;
            margin-right: 0.5rem;
        }

        .form-control {
            background-color: #1c1c2a;
            color: #f0f0f0;
            border: 1px solid #444;
            border-radius: 0.6rem;
        }

        .form-control::placeholder {
            color: #aaa;
        }

        .btn {
            transition: all 0.3s ease;
            border-radius: 0.6rem;
        }

        .btn:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
        }

        .progress {
            height: 22px;
            border-radius: 0.4rem;
            overflow: hidden;
        }

        .footer {
            color: #bbb;
        }

        .spinner {
            display: none;
        }

        .prediction-phishing {
            color: #ffc107;
            /* Warning/Phishing color */
            font-weight: bold;
        }

        .prediction-safe {
            color: #28a745;
            /* Success/Safe color */
            font-weight: bold;
        }

        .url-result {
            margin-top: 0.5rem;
            padding: 0.5rem;
            border-radius: 0.4rem;
        }

        .url-phishing {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .url-safe {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
            /* Danger/Error color */
            margin-top: 1rem;
            font-weight: bold;
        }
    </style>
</head>

<body>

    <header class="gradient-header py-4 text-center">
        <h1 class="display-5">
            üîê PhishGuardian
        </h1>
        <p class="lead mb-0">AI-powered phishing detection for emails and URLs</p>
    </header>

    <main class="container my-5">

        <div class="card mb-4 p-4">
            <h4>
                <i class="bi bi-envelope-fill icon"></i>Analyze Email Content
            </h4>
            <form id="emailForm">
                <div class="mb-3">
                    <textarea class="form-control mt-2" rows="5" name="email_text"
                        placeholder="Paste suspicious email content here..."></textarea>
                </div>
                <button type="button" class="btn btn-primary" onclick="analyzeEmail()">
                    <i class="bi bi-search"></i> Analyze Email
                </button>
                <div id="emailResult" class="mt-3">
                    </div>
            </form>
        </div>

        <div class="card mb-4 p-4">
            <h4>
                <i class="bi bi-link-45deg icon"></i>Analyze URL
            </h4>
            <form id="urlForm">
                <div class="mb-3">
                    <input type="text" class="form-control mt-2" name="url_input"
                        placeholder="Enter suspicious URL (e.g., http://example.com)" autocomplete="off">
                </div>
                <button type="button" class="btn btn-success" onclick="analyzeURL()">
                    <i class="bi bi-shield-check"></i> Analyze URL
                </button>
                <div id="urlResult" class="mt-3">
                    </div>
            </form>
        </div>

        <div id="errorContainer" class="mt-3">
            </div>

    </main>

    <footer class="text-center py-4 footer">
        PhishGuardian v1.1 ‚Äî Securing the Web with AI üß†üîê
    </footer>

    <script>
        async function analyzeEmail() {
            const form = document.getElementById('emailForm');
            const emailText = form.querySelector('[name="email_text"]').value;
            const resultDiv = document.getElementById('emailResult');
            const errorContainer = document.getElementById('errorContainer');

            // Show a loading indicator (optional)
            resultDiv.innerHTML = "<p>Analyzing email...</p>";
            errorContainer.innerHTML = ""; // Clear previous errors

            try {
                const response = await fetch('/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email_text=${encodeURIComponent(emailText)}`
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json(); // Assuming your backend returns JSON

                if (data.error) {
                    errorContainer.innerHTML = `<div class="alert alert-danger error-message">${data.error}</div>`;
                    resultDiv.innerHTML = ""; // Clear any previous result
                } else {
                    let resultHTML = "";
                    if (data.prediction) {
                        if (data.prediction === 'phishing') {
                            resultHTML +=
                                "<i class='bi bi-exclamation-triangle-fill text-warning'></i> This email appears <strong class='prediction-phishing'>phishy</strong> ‚ö†Ô∏è<br>";
                        } else if (data.prediction === 'ham') {
                            resultHTML +=
                                "<i class='bi bi-check-circle-fill text-success'></i> This email appears <strong class='prediction-safe'>safe</strong> ‚úÖ<br>";
                        } else {
                            resultHTML +=
                                "<i class='bi bi-x-octagon-fill text-danger'></i> Error during analysis.<br>";
                        }
                    }

                    if (data.urls && data.urls.length > 0) {
                        resultHTML += "<strong>URLs Found:</strong><br>";
                        data.urls.forEach(url => {
                            const resultClass = url.result === 'phishing' ? 'url-phishing' : 'url-safe';
                            const predictionClass = url.result === 'phishing' ? 'prediction-phishing' :
                                'prediction-safe';
                            resultHTML +=
                                `<div class='url-result ${resultClass}'>${url.url} - <strong class='${predictionClass}'>${url.result}</strong></div>`;
                        });
                    }

                    resultDiv.innerHTML = resultHTML;
                }

            } catch (error) {
                errorContainer.innerHTML = `<div class="alert alert-danger error-message">Error: ${error.message}</div>`;
                resultDiv.innerHTML = "";
            }
        }

        async function analyzeURL() {
            const form = document.getElementById('urlForm');
            const urlInput = form.querySelector('[name="url_input"]').value;
            const resultDiv = document.getElementById('urlResult');
            const errorContainer = document.getElementById('errorContainer');

            // Show a loading indicator (optional)
            resultDiv.innerHTML = "<p>Analyzing URL...</p>";
            errorContainer.innerHTML = ""; // Clear previous errors

            try {
                const response = await fetch('/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `url_input=${encodeURIComponent(urlInput)}`
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json(); // Assuming your backend returns JSON

                if (data.error) {
                    errorContainer.innerHTML = `<div class="alert alert-danger error-message">${data.error}</div>`;
                    resultDiv.innerHTML = "";
                } else if (data.urls && data.urls.length > 0) {
                    let resultHTML = "";
                    data.urls.forEach(url => {
                        const resultClass = url.result === 'phishing' ? 'url-phishing' : 'url-safe';
                        const predictionClass = url.result === 'phishing' ? 'prediction-phishing' :
                            'prediction-safe';
                        resultHTML +=
                            `<div class='url-result ${resultClass}'>${url.url} - <strong class='${predictionClass}'>${url.result}</strong></div>`;
                    });
                    resultDiv.innerHTML = resultHTML;
                } else {
                    resultDiv.innerHTML = "<p>No results found.</p>";
                }

            } catch (error) {
                errorContainer.innerHTML = `<div class="alert alert-danger error-message">Error: ${error.message}</div>`;
                resultDiv.innerHTML = "";
            }
        }
    </script>

</body>

</html>


#Backend
# ¬† PROJECT: PhishGuardian v1.1 (Revised with More Data and Potential Improvements)
# ¬† AI-Based Phishing Detection
# ¬† By: Aditya


# --- Step 1: Required Libraries ---
import os
import re
import joblib
import pandas as pd
from flask import Flask, render_template, request, jsonify  # Changed render_template to jsonify
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression  # Trying a different model
from sklearn.metrics import classification_report
from urllib.parse import urlparse

# --- Step 2: Utility Functions ---
def clean_text(text):
    text = text.lower()
    text = re.sub(r'\b(https?://\S+)\b', ' URL ', text)
    text = re.sub(r'[^a-z0-9\s]', '', text)
    return text


def extract_urls(text):
    return re.findall(r'(https?://\S+)', text)


def extract_url_features(url):
    parsed = urlparse(url)
    return [
        len(url),
        len(parsed.netloc),
        url.count('@'),
        url.count('-'),
        url.startswith("https"),
        '.com' in url,
    ]


# --- Step 3: Train Email Text Model ---
def train_email_model():
    # ... (Your existing train_email_model function) ...
    data = {
        'text': [
            "Verify your account now to avoid suspension. Click here: http://fake-login.com",
            "Claim your free gift card! Limited time offer. Link: http://get-free-stuff.net",
            "Your report for Q3 2024 is attached below. Please review it.",
            "Meeting reminder: Tomorrow at 10 AM in Conference Room A.",
            "Congratulations! You've won a prize. Claim now: http://winner.com",
            "Project deadline has been extended to Friday.",
            "Urgent security alert! Your password has expired. Reset it here: http://reset-password.net",
            "Hi team, please find the updated project plan attached.",
            "You've received a new message from a friend. Click to view.",
            "Suspicious activity detected on your account. Secure it now: http://secure-account.info",
            "Dear Customer, we noticed unusual activity...",
            "Invoice #INV-12345 attached for your payment.",
            "Click this link to unsubscribe from our newsletter.",
            "Important update regarding your order #ABC-678.",
            "Win an iPhone 15! Enter our contest: http://win-now.site",
            "Please review the following document and provide feedback.",
            "Your flight booking confirmation is attached.",
            "We are offering a special discount for loyal customers.",
            "Your package has been shipped. Track it here: http://track-package.net",
            "Action required: Update your billing information.",
        ],
        'label': ['phishing', 'phishing', 'ham', 'ham', 'phishing', 'ham',
                  'phishing', 'ham', 'ham', 'phishing', 'phishing', 'ham',
                  'ham', 'ham', 'phishing', 'ham', 'ham', 'ham', 'phishing', 'phishing']
    }
    df = pd.DataFrame(data)
    df['text'] = df['text'].apply(clean_text)
    vec = TfidfVectorizer(stop_words='english', min_df=1, max_df=1.0,
                          ngram_range=(1, 2))
    X = vec.fit_transform(df['text'])
    y = df['label']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                        random_state=42)
    model = LogisticRegression(solver='liblinear', random_state=42)
    model.fit(X_train, y_train)
    joblib.dump(model, 'email_model.pkl')
    joblib.dump(vec, 'email_vectorizer.pkl')
    print("[+] Email model trained.")
    print(f"[+] Vocabulary size: {len(vec.vocabulary_)}")


# --- Step 4: Train URL Classifier ---
def train_url_model():
    # ... (Your existing train_url_model function) ...
    data = [
        ("http://login.paypal.com-reset.com", 'phishing'),
        ("https://accounts.google.com", 'ham'),
        ("http://free-gift-card-now.com", 'phishing'),
        ("https://mail.yahoo.com", 'ham'),
        ("http://verify-your-bank.ru/login", 'phishing'),
        ("https://www.djangoproject.com/", 'ham'),
        ("http://prize-winner-info.com/claim", 'phishing'),
        ("https://news.ycombinator.com/", 'ham')
    ]
    X = [extract_url_features(url) for url, label in data]
    y = [label for url, label in data]
    model = MultinomialNB()
    model.fit(X, y)
    joblib.dump(model, 'url_model.pkl')
    print("[+] URL model trained.")


# --- Step 5: Flask Web App ---
app = Flask(__name__)


@app.route("/", methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'email_text' in request.form:
            email_text = request.form['email_text']
            cleaned = clean_text(email_text)
            prediction = None
            url_predictions = []
            error_message = None

            try:
                email_model = joblib.load('email_model.pkl')
                email_vec = joblib.load('email_vectorizer.pkl')
                print("[+] Email model loaded.")
            except Exception as e:
                error_message = f"Error loading email model: {e}"
                print(f"[ERROR] {error_message}")
                return jsonify({'error': error_message})

            try:
                email_features = email_vec.transform([cleaned])
                prediction = email_model.predict(email_features)[0]
                print(f"[+] Email prediction: {prediction}")
            except Exception as e:
                error_message = f"Error during email prediction: {e}"
                print(f"[ERROR] {error_message}")
                prediction = "Error"

            try:
                url_model = joblib.load('url_model.pkl')
                print("[+] URL model loaded.")
                urls = extract_urls(email_text)
                for url in urls:
                    features = extract_url_features(url)
                    result = url_model.predict([features])[0]
                    url_predictions.append({'url': url, 'result': result})
            except Exception as e:
                error_message = f"Error during URL prediction from email: {e}"
                print(f"[ERROR] {error_message}")

            return jsonify({'prediction': prediction, 'urls': url_predictions, 'error': error_message})

        elif 'url_input' in request.form:
            single_url = request.form['url_input']
            url_predictions = []
            error_message = None

            try:
                url_model = joblib.load('url_model.pkl')
                print("[+] URL model loaded for single analysis.")
                features = extract_url_features(single_url)
                url_prediction_single = url_model.predict([features])[0]
                url_predictions.append({'url': single_url, 'result': url_prediction_single})
            except Exception as e:
                error_message = f"Error during single URL prediction: {e}"
                print(f"[ERROR] {error_message}")

            return jsonify({'urls': url_predictions, 'error': error_message})

    return render_template("frontend.html")


# --- Step 6: Train Models on First Run ---
if not os.path.exists("email_model.pkl"):
    train_email_model()
if not os.path.exists("url_model.pkl"):
    train_url_model()

# --- Step 7: Run Flask App ---
if __name__ == '__main__':
    app.run(debug=True)
