#   PROJECT: PhishGuardian v1.1 (Revised with More Data and Potential Improvements)
#   AI-Based Phishing Detection
#   By: Aditya


# --- Step 1: Required Libraries ---
import os
import re
import joblib
import pandas as pd
from flask import Flask, render_template, request, jsonify  # Changed render_template to jsonify
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression  # Trying a different model
from sklearn.metrics import classification_report
from urllib.parse import urlparse

# --- Step 2: Utility Functions ---
def clean_text(text):
    text = text.lower()
    text = re.sub(r'\b(https?://\S+)\b', ' URL ', text)
    text = re.sub(r'[^a-z0-9\s]', '', text)
    return text


def extract_urls(text):
    return re.findall(r'(https?://\S+)', text)


def extract_url_features(url):
    parsed = urlparse(url)
    return [
        len(url),
        len(parsed.netloc),
        url.count('@'),
        url.count('-'),
        url.startswith("https"),
        '.com' in url,
    ]


# --- Step 3: Train Email Text Model ---
def train_email_model():
    # ... (Your existing train_email_model function) ...
    data = {
        'text': [
            "Verify your account now to avoid suspension. Click here: http://fake-login.com",
            "Claim your free gift card! Limited time offer. Link: http://get-free-stuff.net",
            "Your report for Q3 2024 is attached below. Please review it.",
            "Meeting reminder: Tomorrow at 10 AM in Conference Room A.",
            "Congratulations! You've won a prize. Claim now: http://winner.com",
            "Project deadline has been extended to Friday.",
            "Urgent security alert! Your password has expired. Reset it here: http://reset-password.net",
            "Hi team, please find the updated project plan attached.",
            "You've received a new message from a friend. Click to view.",
            "Suspicious activity detected on your account. Secure it now: http://secure-account.info",
            "Dear Customer, we noticed unusual activity...",
            "Invoice #INV-12345 attached for your payment.",
            "Click this link to unsubscribe from our newsletter.",
            "Important update regarding your order #ABC-678.",
            "Win an iPhone 15! Enter our contest: http://win-now.site",
            "Please review the following document and provide feedback.",
            "Your flight booking confirmation is attached.",
            "We are offering a special discount for loyal customers.",
            "Your package has been shipped. Track it here: http://track-package.net",
            "Action required: Update your billing information.",
        ],
        'label': ['phishing', 'phishing', 'ham', 'ham', 'phishing', 'ham',
                  'phishing', 'ham', 'ham', 'phishing', 'phishing', 'ham',
                  'ham', 'ham', 'phishing', 'ham', 'ham', 'ham', 'phishing', 'phishing']
    }
    df = pd.DataFrame(data)
    df['text'] = df['text'].apply(clean_text)
    vec = TfidfVectorizer(stop_words='english', min_df=1, max_df=1.0,
                          ngram_range=(1, 2))
    X = vec.fit_transform(df['text'])
    y = df['label']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                        random_state=42)
    model = LogisticRegression(solver='liblinear', random_state=42)
    model.fit(X_train, y_train)
    joblib.dump(model, 'email_model.pkl')
    joblib.dump(vec, 'email_vectorizer.pkl')
    print("[+] Email model trained.")
    print(f"[+] Vocabulary size: {len(vec.vocabulary_)}")


# --- Step 4: Train URL Classifier ---
def train_url_model():
    # ... (Your existing train_url_model function) ...
    data = [
        ("http://login.paypal.com-reset.com", 'phishing'),
        ("https://accounts.google.com", 'ham'),
        ("http://free-gift-card-now.com", 'phishing'),
        ("https://mail.yahoo.com", 'ham'),
        ("http://verify-your-bank.ru/login", 'phishing'),
        ("https://www.djangoproject.com/", 'ham'),
        ("http://prize-winner-info.com/claim", 'phishing'),
        ("https://news.ycombinator.com/", 'ham')
    ]
    X = [extract_url_features(url) for url, label in data]
    y = [label for url, label in data]
    model = MultinomialNB()
    model.fit(X, y)
    joblib.dump(model, 'url_model.pkl')
    print("[+] URL model trained.")


# --- Step 5: Flask Web App ---
app = Flask(__name__)


@app.route("/", methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'email_text' in request.form:
            email_text = request.form['email_text']
            cleaned = clean_text(email_text)
            prediction = None
            url_predictions = []
            error_message = None

            try:
                email_model = joblib.load('email_model.pkl')
                email_vec = joblib.load('email_vectorizer.pkl')
                print("[+] Email model loaded.")
            except Exception as e:
                error_message = f"Error loading email model: {e}"
                print(f"[ERROR] {error_message}")
                return jsonify({'error': error_message})

            try:
                email_features = email_vec.transform([cleaned])
                prediction = email_model.predict(email_features)[0]
                print(f"[+] Email prediction: {prediction}")
            except Exception as e:
                error_message = f"Error during email prediction: {e}"
                print(f"[ERROR] {error_message}")
                prediction = "Error"

            try:
                url_model = joblib.load('url_model.pkl')
                print("[+] URL model loaded.")
                urls = extract_urls(email_text)
                for url in urls:
                    features = extract_url_features(url)
                    result = url_model.predict([features])[0]
                    url_predictions.append({'url': url, 'result': result})
            except Exception as e:
                error_message = f"Error during URL prediction from email: {e}"
                print(f"[ERROR] {error_message}")

            return jsonify({'prediction': prediction, 'urls': url_predictions, 'error': error_message})

        elif 'url_input' in request.form:
            single_url = request.form['url_input']
            url_predictions = []
            error_message = None

            try:
                url_model = joblib.load('url_model.pkl')
                print("[+] URL model loaded for single analysis.")
                features = extract_url_features(single_url)
                url_prediction_single = url_model.predict([features])[0]
                url_predictions.append({'url': single_url, 'result': url_prediction_single})
            except Exception as e:
                error_message = f"Error during single URL prediction: {e}"
                print(f"[ERROR] {error_message}")

            return jsonify({'urls': url_predictions, 'error': error_message})

    return render_template("frontend.html")


# --- Step 6: Train Models on First Run ---
if not os.path.exists("email_model.pkl"):
    train_email_model()
if not os.path.exists("url_model.pkl"):
    train_url_model()

# --- Step 7: Run Flask App ---
if __name__ == '__main__':
    app.run(debug=True)
